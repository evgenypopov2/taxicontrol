buildscript {
    ext.cubaVersion = '7.2.7'
    repositories {
        maven {
            url 'https://dl.bintray.com/cuba-platform/main'

        }
        jcenter()

        maven {
            url 'https://cuba-platform.bintray.com/premium'
            credentials {
                username(rootProject.hasProperty('bintrayPremiumRepoUser') ?
                        rootProject['bintrayPremiumRepoUser'] : System.getenv('CUBA_PREMIUM_USER'))
                password(rootProject.hasProperty('premiumRepoPass') ?
                        rootProject['premiumRepoPass'] : System.getenv('CUBA_PREMIUM_PASSWORD'))
            }
        }

    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

def modulePrefix = 'taxi'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")
def webToolkitModule = project(":${modulePrefix}-web-toolkit")
def portalModule = project(":${modulePrefix}-portal")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'ru.otus.taxicontrol'
        version = '0.1'
        isSnapshot = true
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
    appComponent("com.haulmont.addon.maps:maps-global:1.3.0")
    appComponent('com.haulmont.addon.helium:helium-global:0.2.0')
    appComponent("com.haulmont.charts:charts-global:$cubaVersion")
}

def hsql = 'org.hsqldb:hsqldb:2.4.1'

configure([globalModule, coreModule, webModule, webToolkitModule, portalModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('org.junit.jupiter:junit-jupiter-api:5.5.2')
        testCompile('org.junit.jupiter:junit-jupiter-engine:5.5.2')
        testCompile('org.junit.vintage:junit-vintage-engine:5.5.2')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
    test {
        useJUnitPlatform()
    }
}


configure(globalModule) {
    dependencies {
        if (!JavaVersion.current().isJava8()) {
            runtime('javax.xml.bind:jaxb-api:2.3.1')
            runtime('org.glassfish.jaxb:jaxb-runtime:2.3.1')
        }
    }

    entitiesEnhancing {
        main {
            enabled = true
        }
    }
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compileOnly(servletApi)
        jdbc(hsql)
        testRuntime(hsql)
        jdbc('org.postgresql:postgresql:42.2.9')
    }

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}-core/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
    }
    task createDb_taxi(dependsOn: assembleDbScripts, description: 'Creates additional database - taxi', type: CubaDbCreation) {
        storeName = 'taxi'
    }
    task updateDb_taxi(dependsOn: assembleDbScripts, description: 'Updates additional database - taxi', type: CubaDbUpdate) {
        storeName = 'taxi'
    }
    task createAllDb(dependsOn: [createDb, createDb_taxi])
    task updateAllDb(dependsOn: [updateDb, updateDb_taxi])
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        compileOnly(servletApi)
        compile(globalModule)
    }

    jar {
        with copySpec {
            from sourceSets.main.allJava
            include "ru/otus/taxicontrol/web/toolkit/ui/client/**"
        }
    }

    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "ru/otus/taxicontrol/**"
        into "$cuba.appHome/${modulePrefix}/conf"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = "${modulePrefix}"
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory', type: Delete) {
        delete "$cuba.appHome/${modulePrefix}/conf"
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}"
        appJars(modulePrefix + '-global', modulePrefix + '-web')
    }
}

configure(webToolkitModule) {
    dependencies {
        compile(webModule)
    }

    jar {
        from sourceSets.main.allJava
    }

    task buildWidgetSet(type: CubaWidgetSetBuilding) {
        widgetSetClass = 'ru.otus.taxicontrol.web.toolkit.ui.AppWidgetSet'
    }

    task debugWidgetSet(type: CubaWidgetSetDebug) {
        widgetSetClass = 'ru.otus.taxicontrol.web.toolkit.ui.AppWidgetSet'
    }

    task webArchive(dependsOn: buildWidgetSet, type: Jar) {
        from file("$buildDir/web")
        classifier = 'client'
    }

    artifacts {
        archives webArchive
    }

    task deploy(dependsOn: webArchive, type: Copy) {
        from webArchive
        into "$cuba.tomcat.dir/webapps/${modulePrefix}/WEB-INF/lib"
    }
}

configure(portalModule) {
    dependencies {
        compileOnly(servletApi)
        compile(globalModule)
    }

    def webappName = "${modulePrefix}-portal"
    def resourcesDir = "$cuba.tomcat.dir/webapps/$webappName/resources"
    def ftlDir = "$cuba.tomcat.dir/webapps/$webappName/WEB-INF/templates"

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = webappName
        appJars(modulePrefix + '-global', modulePrefix + '-portal')
    }

    task deployStatic() {
        doLast {
            copy {
                from file('web/resources')
                include '**/*.css'
                include '**/*.js'
                include '**/*.png'
                include '**/*.gif'
                include '**/*.jpg'
                into resourcesDir
            }
            copy {
                from file('web/WEB-INF/templates')
                include '**/*.ftl'
                into ftlDir
            }
        }
    }

    task cleanStatic() {
        doLast {
            delete resourcesDir
            delete ftlDir
        }
    }

    task webArchive(type: Zip) {
        from file('web')
        from file("$buildDir/web")
        exclude '**/web.xml', '**/app.properties'
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }
}

task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf") {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-portal")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy", ":${modulePrefix}-web:deploy", ":${modulePrefix}-web-toolkit:deploy", ":${modulePrefix}-portal:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
    }
}
restart.finalizedBy start

